{"version":3,"sources":["components/TodoList/index.js","App.js","reportWebVitals.js","index.js"],"names":["todoList","id","completed","description","TodoList","props","completeItem","itemId","setState","prevState","prevList","itemIndex","findIndex","item","handleKeyPress","event","key","addTodoItem","prevValue","state","inputRef","current","value","curId","React","createRef","checkRef","filterRef","length","filtered","this","filter","map","ref","type","onChange","defaultChecked","style","textDecoration","undefined","prev","padding","onKeyPress","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAEIA,EAAW,CACb,CACEC,GAAG,EACHC,WAAU,EACVC,YAAa,6CAEf,CACEF,GAAG,EACHC,WAAU,EACVC,YAAa,iCAIIC,E,kDACnB,WAAYC,GAAO,IAAD,uBAChB,cAAMA,IAMRC,aAAe,SAACC,GACd,EAAKC,UAAS,SAACC,GACb,IAAIC,EAAWD,EAAUT,SACrBW,EAAYD,EAASE,WAAU,SAACC,GAAD,OAAUA,EAAKZ,KAAOM,KAKzD,OAJEG,EAASC,GAAT,2BACOD,EAASC,IADhB,IAEIT,WAAYQ,EAASC,GAAWT,YAE/B,CAACF,SAAS,YAAIU,QAfP,EAkBlBI,eAAiB,SAACC,GACE,UAAdA,EAAMC,KACR,EAAKC,eApBS,EAuBlBA,YAAc,WACZ,IAAIC,EAAY,EAAKC,MAAMC,SAASC,QAAQC,MAC5C,EAAKd,UAAS,SAAAC,GAAS,MAAK,CAC1BT,SAAS,GAAD,mBAAKS,EAAUT,UAAf,CACN,CAACE,WAAU,EAAOC,YAAae,EAAWjB,GAAGQ,EAAUc,SACvDA,MAAMd,EAAUc,MAAM,MAE1B,EAAKJ,MAAMC,SAASC,QAAQC,MAAQ,IA5BpC,IAAIF,EAAWI,IAAMC,YACjBC,EAAWF,IAAMC,YACjBE,EAAYH,IAAMC,YAJN,OAKhB,EAAKN,MAAQ,CAACnB,WAAUuB,MAAMvB,EAAS4B,OAAO,EAAGR,WAAUM,WAAUC,YAAWE,UAAS,GALzE,E,0CAgClB,WAAU,IAAD,OACH7B,EAAW8B,KAAKX,MAAMnB,SAa5B,OAZQ8B,KAAKX,MAAMU,WACb7B,EAAWA,EAAS+B,QAAO,SAAAlB,GAAI,OAAKA,EAAKX,cAG3CF,EAAWA,EAASgC,KAAI,SAACnB,GAAD,OACtB,8BACE,kCACE,uBAAOoB,IAAK,EAAKd,MAAMO,SAAUQ,KAAK,WAAWC,SAAU,kBAAM,EAAK7B,aAAaO,EAAKZ,KAAKmC,eAAgBvB,EAAKX,YAClH,sBAAMmC,MAAOxB,EAAKX,UAAY,CAACoC,eAAgB,qBAAkBC,EAAjE,SAA6E1B,EAAKV,kBAH5EU,EAAKZ,OAQnB,qCACE,kDACA,kCACE,uBAAOgC,IAAKH,KAAKX,MAAMQ,UAAWO,KAAK,WACrCC,SAAU,kBAAM,EAAK3B,UAAS,SAACgC,GAAD,MAAW,CAACX,UAAWW,EAAKX,cAC1DO,gBAAgB,IAHpB,4BAMI,uBACJ,qBAAKC,MAAO,CAACI,QAAQ,OAArB,SACGzC,IAEH,uBAAO0C,WAAY,SAAC3B,GAAD,OAAW,EAAKD,eAAeC,IAAQkB,IAAKH,KAAKX,MAAMC,WAC1E,wBAAQuB,QAAS,kBAAM,EAAK1B,eAA5B,kC,GA7DgCO,IAAMoB,WCL7BC,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49c6112e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet todoList = [\r\n  {\r\n    id:1,\r\n    completed:true,\r\n    description: \"Complete a demo of React and Github Pages\",\r\n  },\r\n  {\r\n    id:2,\r\n    completed:true,\r\n    description: \"Demo a TODO list application\",\r\n  },\r\n]\r\n\r\nexport default class TodoList extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    let inputRef = React.createRef()\r\n    let checkRef = React.createRef()\r\n    let filterRef = React.createRef()\r\n    this.state = {todoList, curId:todoList.length+1, inputRef, checkRef, filterRef, filtered:false}\r\n  }\r\n  completeItem = (itemId) =>{\r\n    this.setState((prevState) =>{\r\n      let prevList = prevState.todoList\r\n      let itemIndex = prevList.findIndex((item) => item.id === itemId)\r\n        prevList[itemIndex] = {\r\n            ...prevList[itemIndex],\r\n            completed: !prevList[itemIndex].completed,\r\n      }\r\n      return {todoList:[...prevList]}\r\n    })\r\n  }\r\n  handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\"){\r\n      this.addTodoItem()\r\n    }\r\n  }\r\n  addTodoItem = () => {\r\n    let prevValue = this.state.inputRef.current.value\r\n    this.setState(prevState => ({\r\n      todoList:[...prevState.todoList,\r\n        {completed:false, description: prevValue, id:prevState.curId}],\r\n        curId:prevState.curId+1\r\n      }))\r\n    this.state.inputRef.current.value = \"\"\r\n  }\r\n  render() {\r\n    let todoList = this.state.todoList\r\n      if (this.state.filtered) {\r\n        todoList = todoList.filter(item => !item.completed)\r\n      }\r\n\r\n      todoList = todoList.map((item) =>(\r\n        <div key={item.id}>\r\n          <label>\r\n            <input ref={this.state.checkRef} type=\"checkbox\" onChange={() => this.completeItem(item.id)} defaultChecked={item.completed}></input>\r\n            <span style={item.completed ? {textDecoration: \"line-through\"} : undefined}>{item.description}</span>\r\n          </label>\r\n        </div>\r\n    ))\r\n  return(\r\n    <>\r\n      <h1>What to do Today</h1>\r\n      <label>\r\n        <input ref={this.state.filterRef} type=\"checkbox\"\r\n          onChange={() => this.setState((prev) => ({filtered: !prev.filtered}))}\r\n          defaultChecked={false}></input>\r\n        Filter completed items\r\n      </label>\r\n          <hr></hr>\r\n      <div style={{padding:\"5px\"}}>\r\n        {todoList}\r\n      </div>\r\n      <input onKeyPress={(event) => this.handleKeyPress(event)} ref={this.state.inputRef}></input>\r\n      <button onClick={() => this.addTodoItem()}>Add TODO item</button>\r\n    </>\r\n  )\r\n  }\r\n}","import './App.css';\nimport React from 'react';\nimport TodoList from './components/TodoList';\n\nfunction App(){\n  return(\n    <TodoList />\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}